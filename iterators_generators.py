# -*- coding: utf-8 -*-
"""iterators_generators

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MmlED4KWtcq_9kxz8Api8jeTpGb5YE2o
"""

class Countdown:
    def __init__(self, start):
        self.start = start

    def __iter__(self):
        self.num = self.start
        return self

    def __next__(self):
        if self.num <= 0:
            raise StopIteration
        else:
            result = self.num
            self.num -= 1
            return result
def fibonacci_generator(limit):
    a, b = 0, 1
    while a <= limit:
        yield a
        a, b = b, a + b
import random

def random_number_generator(start, end, count):
    for _ in range(count):
        yield random.randint(start, end)
def main():

    print("Countdown:")
    countdown = Countdown(5)
    for num in countdown:
        print(num, end=' ')
    print()

    print("\nFibonacci numbers up to 50:")
    for fib in fibonacci_generator(50):
        print(fib, end=' ')
    print()

    print("\nRandom numbers between 1 and 100 (5 numbers):")
    for rand_num in random_number_generator(1, 100, 5):
        print(rand_num, end=' ')
    print()

if __name__ == "__main__":
    main()